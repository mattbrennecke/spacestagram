{"version":3,"sources":["ImageCard.js","App.js","index.js"],"names":["ImageCard","props","useState","likeString","setLikeString","textOnly","MediaCard","portrait","description","title","date","primaryAction","content","onAction","alt","width","height","src","imgSrc","style","objectFit","objectPosition","App","error","setError","loaded","setLoaded","apiData","setApiData","currentDate","Date","startingDate","setDate","getDate","start","end","selectedDates","setSelectedDates","month","getMonth","year","getFullYear","orderNewestFirst","setOrderNewestFirst","handleMonthChange","useCallback","handleFirstButtonClick","handleSecondButtonClick","dateNavCard","Card","DatePicker","onChange","onMonthChange","selected","disableDatesBefore","disableDatesAfter","allowRange","Button","onClick","ButtonGroup","pressed","useEffect","fetch","toISOString","split","then","response","ok","json","Error","statusText","data","reverse","catch","thrownError","console","log","Page","subtitle","map","entry","explanation","url","ReactDOM","render","AppProvider","i18n","enTranslations","document","getElementById"],"mappings":"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","file":"static/js/main.9828672e.chunk.js","sourcesContent":["import {MediaCard} from '@shopify/polaris';\nimport '@shopify/polaris/dist/styles.css';\nimport {useState} from 'react';\n\nfunction ImageCard(props) {\n  const [likeString, setLikeString] = useState(\"Like\");\n\n  //conditionally render based on textOnly prop\n  if(props.textOnly === \"true\"){\n    return (\n      <MediaCard portrait description={props.description} />\n    );\n  }\n  else{\n    return (\n      <MediaCard\n          portrait\n          title={props.title + \" (\" + props.date + \")\"}\n          primaryAction={{\n              content: likeString,\n              onAction: () => {\n                if(likeString === \"Like\"){setLikeString(\"Unlike\");}\n                else{setLikeString(\"Like\");}\n              },\n          }}\n          description={props.description}\n          >\n          <img alt={props.title} width=\"100%\" height=\"100%\" src={props.imgSrc} style={{objectFit:'cover', objectPosition:'center'}} />\n      </MediaCard>\n    );\n  }\n}\n\n\nexport default ImageCard;","import './App.css';\nimport {Page, DatePicker, Button, Card, ButtonGroup} from '@shopify/polaris';\nimport '@shopify/polaris/dist/styles.css';\nimport ImageCard from './ImageCard';\nimport { useEffect, useState, useCallback } from 'react';\n\nfunction App() {\n  //general variables\n  const [error, setError] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  const [apiData, setApiData] = useState([]);\n\n  //date picker variables\n  const currentDate = new Date();\n  const startingDate = new Date();\n  startingDate.setDate(startingDate.getDate()-6);\n  const [selectedDates, setSelectedDates] = useState({\n    start: startingDate,\n    end: currentDate,\n  });\n  const [{month, year}, setDate] = useState({month: currentDate.getMonth(), year: currentDate.getFullYear()});\n  const [orderNewestFirst, setOrderNewestFirst] = useState(true);\n\n  //date picker and sort button handlers\n  const handleMonthChange = useCallback(\n    (month, year) => setDate({month, year}),\n    [],\n  );\n  const handleFirstButtonClick = useCallback(() => {\n    if (orderNewestFirst) return;\n    setLoaded(false);\n    setOrderNewestFirst(true);\n    // eslint-disable-next-line\n  }, [orderNewestFirst]);\n  const handleSecondButtonClick = useCallback(() => {\n    if (!orderNewestFirst) return;\n    setLoaded(false);\n    setOrderNewestFirst(false);\n    // eslint-disable-next-line\n  }, [orderNewestFirst]);\n\n  //element for rendering date picker and sort buttons\n  const dateNavCard = (\n    <Card>\n      <DatePicker\n        month={month}\n        year={year}\n        onChange={setSelectedDates}\n        onMonthChange={handleMonthChange}\n        selected={selectedDates}\n        disableDatesBefore={new Date(1995, 5, 17)}\n        disableDatesAfter={currentDate}\n        allowRange\n      />\n      <Button onClick={() => setLoaded(false)}>Update Images for Selected Dates</Button>\n      <ButtonGroup>\n        <Button pressed={orderNewestFirst} onClick={handleFirstButtonClick}>Show Newest Images First</Button>\n        <Button pressed={!orderNewestFirst} onClick={handleSecondButtonClick}>Show Oldest Images First</Button>\n      </ButtonGroup>\n    </Card>\n  );\n\n  //Call NASA API and store response when loaded variable changes\n  useEffect(() => {\n    fetch(\"https://api.nasa.gov/planetary/apod?start_date=\" + selectedDates.start.toISOString().split('T')[0] + \"&end_date=\" + selectedDates.end.toISOString().split('T')[0] + \"&api_key=uNyJYzbkG5g7PtOmPReYFiqARukERJKzwh3hQHM3\")\n      .then(\n        (response) => {\n          if(response.ok){\n            return(response.json());\n          }\n          else{\n            throw(Error(response.statusText));\n          }\n        }\n      )\n      .then(\n        (data) => {\n          if(orderNewestFirst){\n            setApiData(data.reverse());\n            setLoaded(true);\n          }\n          else{\n            setApiData(data);\n            setLoaded(true);\n\n          }\n        }\n      )\n      .catch(\n        (thrownError) => {\n          console.log(thrownError);\n          setError(true);\n        }\n      )\n      // eslint-disable-next-line\n  }, [loaded])\n\n  //conditionally return components to be rendered\n  if(error){\n    return(\n      <Page title=\"Spacestagram\" subtitle=\"Brought to you by NASA's Astronomy Picture of the Day (APOD) API.\">\n        {dateNavCard}\n        <ImageCard textOnly=\"true\" description=\"Error loading data from NASA API. Error logged to console.\" />\n      </Page>\n    );\n  }\n  else if (!loaded){\n    return(\n      <Page title=\"Spacestagram\" subtitle=\"Brought to you by NASA's Astronomy Picture of the Day (APOD) API.\">\n        {dateNavCard}\n        <ImageCard textOnly=\"true\" description=\"Loading...\" />\n      </Page>\n    );\n  }\n  else{\n    return(\n      <Page title=\"Spacestagram\" subtitle=\"Brought to you by NASA's Astronomy Picture of the Day (APOD) API.\">\n        {dateNavCard}       \n        {apiData.map((entry) => (\n          <ImageCard title={entry.title} date={entry.date} description={entry.explanation} imgSrc={entry.url} textOnly=\"false\" key={entry.title}/>\n        ))}\n      </Page>\n    );\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport '@shopify/polaris/dist/styles.css';\nimport {AppProvider} from '@shopify/polaris';\nimport enTranslations from '@shopify/polaris/locales/en.json';\n\nReactDOM.render(\n  <AppProvider i18n={enTranslations}>\n    <App />\n  </AppProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}